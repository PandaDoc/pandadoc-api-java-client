/*
 * PandaDoc Public API
 * PandaDoc Public API documentation
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pandadoc.client.api;

import com.pandadoc.client.ApiCallback;
import com.pandadoc.client.ApiClient;
import com.pandadoc.client.ApiException;
import com.pandadoc.client.ApiResponse;
import com.pandadoc.client.Configuration;
import com.pandadoc.client.Pair;
import com.pandadoc.client.ProgressRequestBody;
import com.pandadoc.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pandadoc.client.models.DocumentsFolderCreateRequest;
import com.pandadoc.client.models.DocumentsFolderCreateResponse;
import com.pandadoc.client.models.DocumentsFolderListResponse;
import com.pandadoc.client.models.DocumentsFolderRenameRequest;
import com.pandadoc.client.models.DocumentsFolderRenameResponse;
import com.pandadoc.client.models.TemplatesFolderCreateRequest;
import com.pandadoc.client.models.TemplatesFolderCreateResponse;
import com.pandadoc.client.models.TemplatesFolderListResponse;
import com.pandadoc.client.models.TemplatesFolderRenameRequest;
import com.pandadoc.client.models.TemplatesFolderRenameResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class FoldersApiApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public FoldersApiApi() {
        this(Configuration.getDefaultApiClient());
    }

    public FoldersApiApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for createDocumentFolder
     * @param documentsFolderCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentFolderCall(DocumentsFolderCreateRequest documentsFolderCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentsFolderCreateRequest;

        // create path and map variables
        String localVarPath = "/public/v1/documents/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createDocumentFolderValidateBeforeCall(DocumentsFolderCreateRequest documentsFolderCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'documentsFolderCreateRequest' is set
        if (documentsFolderCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'documentsFolderCreateRequest' when calling createDocumentFolder(Async)");
        }
        

        okhttp3.Call localVarCall = createDocumentFolderCall(documentsFolderCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Documents Folder
     * Create a new folder to store your documents.
     * @param documentsFolderCreateRequest  (required)
     * @return DocumentsFolderCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsFolderCreateResponse createDocumentFolder(DocumentsFolderCreateRequest documentsFolderCreateRequest) throws ApiException {
        ApiResponse<DocumentsFolderCreateResponse> localVarResp = createDocumentFolderWithHttpInfo(documentsFolderCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Documents Folder
     * Create a new folder to store your documents.
     * @param documentsFolderCreateRequest  (required)
     * @return ApiResponse&lt;DocumentsFolderCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsFolderCreateResponse> createDocumentFolderWithHttpInfo(DocumentsFolderCreateRequest documentsFolderCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createDocumentFolderValidateBeforeCall(documentsFolderCreateRequest, null);
        Type localVarReturnType = new TypeToken<DocumentsFolderCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Documents Folder (asynchronously)
     * Create a new folder to store your documents.
     * @param documentsFolderCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createDocumentFolderAsync(DocumentsFolderCreateRequest documentsFolderCreateRequest, final ApiCallback<DocumentsFolderCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createDocumentFolderValidateBeforeCall(documentsFolderCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentsFolderCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for createTemplateFolder
     * @param templatesFolderCreateRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemplateFolderCall(TemplatesFolderCreateRequest templatesFolderCreateRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesFolderCreateRequest;

        // create path and map variables
        String localVarPath = "/public/v1/templates/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call createTemplateFolderValidateBeforeCall(TemplatesFolderCreateRequest templatesFolderCreateRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'templatesFolderCreateRequest' is set
        if (templatesFolderCreateRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesFolderCreateRequest' when calling createTemplateFolder(Async)");
        }
        

        okhttp3.Call localVarCall = createTemplateFolderCall(templatesFolderCreateRequest, _callback);
        return localVarCall;

    }

    /**
     * Create Templates Folder
     * Create a new folder to store your templates.
     * @param templatesFolderCreateRequest  (required)
     * @return TemplatesFolderCreateResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public TemplatesFolderCreateResponse createTemplateFolder(TemplatesFolderCreateRequest templatesFolderCreateRequest) throws ApiException {
        ApiResponse<TemplatesFolderCreateResponse> localVarResp = createTemplateFolderWithHttpInfo(templatesFolderCreateRequest);
        return localVarResp.getData();
    }

    /**
     * Create Templates Folder
     * Create a new folder to store your templates.
     * @param templatesFolderCreateRequest  (required)
     * @return ApiResponse&lt;TemplatesFolderCreateResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplatesFolderCreateResponse> createTemplateFolderWithHttpInfo(TemplatesFolderCreateRequest templatesFolderCreateRequest) throws ApiException {
        okhttp3.Call localVarCall = createTemplateFolderValidateBeforeCall(templatesFolderCreateRequest, null);
        Type localVarReturnType = new TypeToken<TemplatesFolderCreateResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create Templates Folder (asynchronously)
     * Create a new folder to store your templates.
     * @param templatesFolderCreateRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 201 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call createTemplateFolderAsync(TemplatesFolderCreateRequest templatesFolderCreateRequest, final ApiCallback<TemplatesFolderCreateResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = createTemplateFolderValidateBeforeCall(templatesFolderCreateRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplatesFolderCreateResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listDocumentFolders
     * @param parentUuid The UUID of the folder containing folders. To list the folders located in the root folder, remove this parameter in the request. (optional)
     * @param count Optionally, specify how many folders to return. Default is 50 folders, maximum is 100 folders. (optional)
     * @param page Optionally, specify which page of the dataset to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDocumentFoldersCall(String parentUuid, Integer count, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/v1/documents/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parentUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_uuid", parentUuid));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listDocumentFoldersValidateBeforeCall(String parentUuid, Integer count, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listDocumentFoldersCall(parentUuid, count, page, _callback);
        return localVarCall;

    }

    /**
     * List Documents Folders
     * Get the list of folders that contain Documents in your account.
     * @param parentUuid The UUID of the folder containing folders. To list the folders located in the root folder, remove this parameter in the request. (optional)
     * @param count Optionally, specify how many folders to return. Default is 50 folders, maximum is 100 folders. (optional)
     * @param page Optionally, specify which page of the dataset to return. (optional)
     * @return DocumentsFolderListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsFolderListResponse listDocumentFolders(String parentUuid, Integer count, Integer page) throws ApiException {
        ApiResponse<DocumentsFolderListResponse> localVarResp = listDocumentFoldersWithHttpInfo(parentUuid, count, page);
        return localVarResp.getData();
    }

    /**
     * List Documents Folders
     * Get the list of folders that contain Documents in your account.
     * @param parentUuid The UUID of the folder containing folders. To list the folders located in the root folder, remove this parameter in the request. (optional)
     * @param count Optionally, specify how many folders to return. Default is 50 folders, maximum is 100 folders. (optional)
     * @param page Optionally, specify which page of the dataset to return. (optional)
     * @return ApiResponse&lt;DocumentsFolderListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsFolderListResponse> listDocumentFoldersWithHttpInfo(String parentUuid, Integer count, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listDocumentFoldersValidateBeforeCall(parentUuid, count, page, null);
        Type localVarReturnType = new TypeToken<DocumentsFolderListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Documents Folders (asynchronously)
     * Get the list of folders that contain Documents in your account.
     * @param parentUuid The UUID of the folder containing folders. To list the folders located in the root folder, remove this parameter in the request. (optional)
     * @param count Optionally, specify how many folders to return. Default is 50 folders, maximum is 100 folders. (optional)
     * @param page Optionally, specify which page of the dataset to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td>  </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listDocumentFoldersAsync(String parentUuid, Integer count, Integer page, final ApiCallback<DocumentsFolderListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listDocumentFoldersValidateBeforeCall(parentUuid, count, page, _callback);
        Type localVarReturnType = new TypeToken<DocumentsFolderListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listTemplateFolders
     * @param parentUuid The UUID of the folder containing folders. To list the folders located in the root folder, remove this parameter in the request. (optional)
     * @param count Optionally, specify how many folders to return. Default is 50 folders, maximum is 100 folders. (optional)
     * @param page Optionally, specify which page of the dataset to return. (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplateFoldersCall(String parentUuid, Integer count, Integer page, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/v1/templates/folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (parentUuid != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("parent_uuid", parentUuid));
        }

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listTemplateFoldersValidateBeforeCall(String parentUuid, Integer count, Integer page, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = listTemplateFoldersCall(parentUuid, count, page, _callback);
        return localVarCall;

    }

    /**
     * List Templates Folders
     * Get the list of folders that contain Templates in your account.
     * @param parentUuid The UUID of the folder containing folders. To list the folders located in the root folder, remove this parameter in the request. (optional)
     * @param count Optionally, specify how many folders to return. Default is 50 folders, maximum is 100 folders. (optional)
     * @param page Optionally, specify which page of the dataset to return. (optional)
     * @return TemplatesFolderListResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public TemplatesFolderListResponse listTemplateFolders(String parentUuid, Integer count, Integer page) throws ApiException {
        ApiResponse<TemplatesFolderListResponse> localVarResp = listTemplateFoldersWithHttpInfo(parentUuid, count, page);
        return localVarResp.getData();
    }

    /**
     * List Templates Folders
     * Get the list of folders that contain Templates in your account.
     * @param parentUuid The UUID of the folder containing folders. To list the folders located in the root folder, remove this parameter in the request. (optional)
     * @param count Optionally, specify how many folders to return. Default is 50 folders, maximum is 100 folders. (optional)
     * @param page Optionally, specify which page of the dataset to return. (optional)
     * @return ApiResponse&lt;TemplatesFolderListResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplatesFolderListResponse> listTemplateFoldersWithHttpInfo(String parentUuid, Integer count, Integer page) throws ApiException {
        okhttp3.Call localVarCall = listTemplateFoldersValidateBeforeCall(parentUuid, count, page, null);
        Type localVarReturnType = new TypeToken<TemplatesFolderListResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * List Templates Folders (asynchronously)
     * Get the list of folders that contain Templates in your account.
     * @param parentUuid The UUID of the folder containing folders. To list the folders located in the root folder, remove this parameter in the request. (optional)
     * @param count Optionally, specify how many folders to return. Default is 50 folders, maximum is 100 folders. (optional)
     * @param page Optionally, specify which page of the dataset to return. (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listTemplateFoldersAsync(String parentUuid, Integer count, Integer page, final ApiCallback<TemplatesFolderListResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listTemplateFoldersValidateBeforeCall(parentUuid, count, page, _callback);
        Type localVarReturnType = new TypeToken<TemplatesFolderListResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renameDocumentFolder
     * @param id The UUID of the folder that you are renaming. (required)
     * @param documentsFolderRenameRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameDocumentFolderCall(String id, DocumentsFolderRenameRequest documentsFolderRenameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = documentsFolderRenameRequest;

        // create path and map variables
        String localVarPath = "/public/v1/documents/folders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameDocumentFolderValidateBeforeCall(String id, DocumentsFolderRenameRequest documentsFolderRenameRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling renameDocumentFolder(Async)");
        }
        
        // verify the required parameter 'documentsFolderRenameRequest' is set
        if (documentsFolderRenameRequest == null) {
            throw new ApiException("Missing the required parameter 'documentsFolderRenameRequest' when calling renameDocumentFolder(Async)");
        }
        

        okhttp3.Call localVarCall = renameDocumentFolderCall(id, documentsFolderRenameRequest, _callback);
        return localVarCall;

    }

    /**
     * Rename Documents Folder
     * Rename Documents Folder.
     * @param id The UUID of the folder that you are renaming. (required)
     * @param documentsFolderRenameRequest  (required)
     * @return DocumentsFolderRenameResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public DocumentsFolderRenameResponse renameDocumentFolder(String id, DocumentsFolderRenameRequest documentsFolderRenameRequest) throws ApiException {
        ApiResponse<DocumentsFolderRenameResponse> localVarResp = renameDocumentFolderWithHttpInfo(id, documentsFolderRenameRequest);
        return localVarResp.getData();
    }

    /**
     * Rename Documents Folder
     * Rename Documents Folder.
     * @param id The UUID of the folder that you are renaming. (required)
     * @param documentsFolderRenameRequest  (required)
     * @return ApiResponse&lt;DocumentsFolderRenameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<DocumentsFolderRenameResponse> renameDocumentFolderWithHttpInfo(String id, DocumentsFolderRenameRequest documentsFolderRenameRequest) throws ApiException {
        okhttp3.Call localVarCall = renameDocumentFolderValidateBeforeCall(id, documentsFolderRenameRequest, null);
        Type localVarReturnType = new TypeToken<DocumentsFolderRenameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename Documents Folder (asynchronously)
     * Rename Documents Folder.
     * @param id The UUID of the folder that you are renaming. (required)
     * @param documentsFolderRenameRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameDocumentFolderAsync(String id, DocumentsFolderRenameRequest documentsFolderRenameRequest, final ApiCallback<DocumentsFolderRenameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameDocumentFolderValidateBeforeCall(id, documentsFolderRenameRequest, _callback);
        Type localVarReturnType = new TypeToken<DocumentsFolderRenameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for renameTemplateFolder
     * @param id The UUID of the folder which you are renaming. (required)
     * @param templatesFolderRenameRequest  (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameTemplateFolderCall(String id, TemplatesFolderRenameRequest templatesFolderRenameRequest, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = templatesFolderRenameRequest;

        // create path and map variables
        String localVarPath = "/public/v1/templates/folders/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarHeaderParams != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call renameTemplateFolderValidateBeforeCall(String id, TemplatesFolderRenameRequest templatesFolderRenameRequest, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling renameTemplateFolder(Async)");
        }
        
        // verify the required parameter 'templatesFolderRenameRequest' is set
        if (templatesFolderRenameRequest == null) {
            throw new ApiException("Missing the required parameter 'templatesFolderRenameRequest' when calling renameTemplateFolder(Async)");
        }
        

        okhttp3.Call localVarCall = renameTemplateFolderCall(id, templatesFolderRenameRequest, _callback);
        return localVarCall;

    }

    /**
     * Rename Templates Folder
     * Rename a templates folder.
     * @param id The UUID of the folder which you are renaming. (required)
     * @param templatesFolderRenameRequest  (required)
     * @return TemplatesFolderRenameResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public TemplatesFolderRenameResponse renameTemplateFolder(String id, TemplatesFolderRenameRequest templatesFolderRenameRequest) throws ApiException {
        ApiResponse<TemplatesFolderRenameResponse> localVarResp = renameTemplateFolderWithHttpInfo(id, templatesFolderRenameRequest);
        return localVarResp.getData();
    }

    /**
     * Rename Templates Folder
     * Rename a templates folder.
     * @param id The UUID of the folder which you are renaming. (required)
     * @param templatesFolderRenameRequest  (required)
     * @return ApiResponse&lt;TemplatesFolderRenameResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<TemplatesFolderRenameResponse> renameTemplateFolderWithHttpInfo(String id, TemplatesFolderRenameRequest templatesFolderRenameRequest) throws ApiException {
        okhttp3.Call localVarCall = renameTemplateFolderValidateBeforeCall(id, templatesFolderRenameRequest, null);
        Type localVarReturnType = new TypeToken<TemplatesFolderRenameResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Rename Templates Folder (asynchronously)
     * Rename a templates folder.
     * @param id The UUID of the folder which you are renaming. (required)
     * @param templatesFolderRenameRequest  (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 404 </td><td> Not found </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call renameTemplateFolderAsync(String id, TemplatesFolderRenameRequest templatesFolderRenameRequest, final ApiCallback<TemplatesFolderRenameResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = renameTemplateFolderValidateBeforeCall(id, templatesFolderRenameRequest, _callback);
        Type localVarReturnType = new TypeToken<TemplatesFolderRenameResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
