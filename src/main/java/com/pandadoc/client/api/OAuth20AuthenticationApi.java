/*
 * PandaDoc Public API
 * PandaDoc Public API documentation
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pandadoc.client.api;

import com.pandadoc.client.ApiCallback;
import com.pandadoc.client.ApiClient;
import com.pandadoc.client.ApiException;
import com.pandadoc.client.ApiResponse;
import com.pandadoc.client.Configuration;
import com.pandadoc.client.Pair;
import com.pandadoc.client.ProgressRequestBody;
import com.pandadoc.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import com.pandadoc.client.models.OAuth2AccessTokenResponse;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class OAuth20AuthenticationApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public OAuth20AuthenticationApi() {
        this(Configuration.getDefaultApiClient());
    }

    public OAuth20AuthenticationApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for accessToken
     * @param grantType This value must be set to &#x60;refresh_token&#x60;. (optional, default to &quot;refresh_token&quot;)
     * @param clientId Client ID that is automatically generated after application creation in the Developer Dashboard. (optional)
     * @param clientSecret Client secret that is automatically generated after application creation in the Developer Dashboard. (optional)
     * @param code &#x60;auth_code&#x60; from the server on the previous step (Authorize a PandaDoc User).  (optional)
     * @param scope Requested permissions. Use &#x60;read+write&#x60; as our default value to send documents. (optional)
     * @param refreshToken &#x60;refresh_token&#x60; you received and stored from the server when initially creating an &#x60;access_token&#x60;.  (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTokenCall(String grantType, String clientId, String clientSecret, String code, String scope, String refreshToken, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/oauth2/access_token";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (grantType != null) {
            localVarFormParams.put("grant_type", grantType);
        }

        if (clientId != null) {
            localVarFormParams.put("client_id", clientId);
        }

        if (clientSecret != null) {
            localVarFormParams.put("client_secret", clientSecret);
        }

        if (code != null) {
            localVarFormParams.put("code", code);
        }

        if (scope != null) {
            localVarFormParams.put("scope", scope);
        }

        if (refreshToken != null) {
            localVarFormParams.put("refresh_token", refreshToken);
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            "application/x-www-form-urlencoded"
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call accessTokenValidateBeforeCall(String grantType, String clientId, String clientSecret, String code, String scope, String refreshToken, final ApiCallback _callback) throws ApiException {
        

        okhttp3.Call localVarCall = accessTokenCall(grantType, clientId, clientSecret, code, scope, refreshToken, _callback);
        return localVarCall;

    }

    /**
     * Create/Refresh Access Token
     * 
     * @param grantType This value must be set to &#x60;refresh_token&#x60;. (optional, default to &quot;refresh_token&quot;)
     * @param clientId Client ID that is automatically generated after application creation in the Developer Dashboard. (optional)
     * @param clientSecret Client secret that is automatically generated after application creation in the Developer Dashboard. (optional)
     * @param code &#x60;auth_code&#x60; from the server on the previous step (Authorize a PandaDoc User).  (optional)
     * @param scope Requested permissions. Use &#x60;read+write&#x60; as our default value to send documents. (optional)
     * @param refreshToken &#x60;refresh_token&#x60; you received and stored from the server when initially creating an &#x60;access_token&#x60;.  (optional)
     * @return OAuth2AccessTokenResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public OAuth2AccessTokenResponse accessToken(String grantType, String clientId, String clientSecret, String code, String scope, String refreshToken) throws ApiException {
        ApiResponse<OAuth2AccessTokenResponse> localVarResp = accessTokenWithHttpInfo(grantType, clientId, clientSecret, code, scope, refreshToken);
        return localVarResp.getData();
    }

    /**
     * Create/Refresh Access Token
     * 
     * @param grantType This value must be set to &#x60;refresh_token&#x60;. (optional, default to &quot;refresh_token&quot;)
     * @param clientId Client ID that is automatically generated after application creation in the Developer Dashboard. (optional)
     * @param clientSecret Client secret that is automatically generated after application creation in the Developer Dashboard. (optional)
     * @param code &#x60;auth_code&#x60; from the server on the previous step (Authorize a PandaDoc User).  (optional)
     * @param scope Requested permissions. Use &#x60;read+write&#x60; as our default value to send documents. (optional)
     * @param refreshToken &#x60;refresh_token&#x60; you received and stored from the server when initially creating an &#x60;access_token&#x60;.  (optional)
     * @return ApiResponse&lt;OAuth2AccessTokenResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<OAuth2AccessTokenResponse> accessTokenWithHttpInfo(String grantType, String clientId, String clientSecret, String code, String scope, String refreshToken) throws ApiException {
        okhttp3.Call localVarCall = accessTokenValidateBeforeCall(grantType, clientId, clientSecret, code, scope, refreshToken, null);
        Type localVarReturnType = new TypeToken<OAuth2AccessTokenResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Create/Refresh Access Token (asynchronously)
     * 
     * @param grantType This value must be set to &#x60;refresh_token&#x60;. (optional, default to &quot;refresh_token&quot;)
     * @param clientId Client ID that is automatically generated after application creation in the Developer Dashboard. (optional)
     * @param clientSecret Client secret that is automatically generated after application creation in the Developer Dashboard. (optional)
     * @param code &#x60;auth_code&#x60; from the server on the previous step (Authorize a PandaDoc User).  (optional)
     * @param scope Requested permissions. Use &#x60;read+write&#x60; as our default value to send documents. (optional)
     * @param refreshToken &#x60;refresh_token&#x60; you received and stored from the server when initially creating an &#x60;access_token&#x60;.  (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> OK </td><td>  -  </td></tr>
        <tr><td> 400 </td><td> Bad Request </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call accessTokenAsync(String grantType, String clientId, String clientSecret, String code, String scope, String refreshToken, final ApiCallback<OAuth2AccessTokenResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = accessTokenValidateBeforeCall(grantType, clientId, clientSecret, code, scope, refreshToken, _callback);
        Type localVarReturnType = new TypeToken<OAuth2AccessTokenResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
