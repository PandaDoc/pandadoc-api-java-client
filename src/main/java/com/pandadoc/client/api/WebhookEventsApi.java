/*
 * PandaDoc Public API
 * PandaDoc Public API documentation
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pandadoc.client.api;

import com.pandadoc.client.ApiCallback;
import com.pandadoc.client.ApiClient;
import com.pandadoc.client.ApiException;
import com.pandadoc.client.ApiResponse;
import com.pandadoc.client.Configuration;
import com.pandadoc.client.Pair;
import com.pandadoc.client.ProgressRequestBody;
import com.pandadoc.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import java.time.OffsetDateTime;
import java.util.UUID;
import com.pandadoc.client.models.WebhookEventDetailsResponse;
import com.pandadoc.client.models.WebhookEventErrorEnum;
import com.pandadoc.client.models.WebhookEventHttpStatusCodeGroupEnum;
import com.pandadoc.client.models.WebhookEventPageResponse;
import com.pandadoc.client.models.WebhookEventTriggerEnum;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class WebhookEventsApi {
    private ApiClient localVarApiClient;
    private int localHostIndex;
    private String localCustomBaseUrl;

    public WebhookEventsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public WebhookEventsApi(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return localVarApiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.localVarApiClient = apiClient;
    }

    public int getHostIndex() {
        return localHostIndex;
    }

    public void setHostIndex(int hostIndex) {
        this.localHostIndex = hostIndex;
    }

    public String getCustomBaseUrl() {
        return localCustomBaseUrl;
    }

    public void setCustomBaseUrl(String customBaseUrl) {
        this.localCustomBaseUrl = customBaseUrl;
    }

    /**
     * Build call for detailsWebhookEvent
     * @param id Webhook event uuid (required)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get webhook event by uuid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detailsWebhookEventCall(UUID id, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/v1/webhook-events/{id}"
            .replaceAll("\\{" + "id" + "\\}", localVarApiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call detailsWebhookEventValidateBeforeCall(UUID id, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling detailsWebhookEvent(Async)");
        }
        

        okhttp3.Call localVarCall = detailsWebhookEventCall(id, _callback);
        return localVarCall;

    }

    /**
     * Get webhook event by uuid
     * 
     * @param id Webhook event uuid (required)
     * @return WebhookEventDetailsResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get webhook event by uuid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public WebhookEventDetailsResponse detailsWebhookEvent(UUID id) throws ApiException {
        ApiResponse<WebhookEventDetailsResponse> localVarResp = detailsWebhookEventWithHttpInfo(id);
        return localVarResp.getData();
    }

    /**
     * Get webhook event by uuid
     * 
     * @param id Webhook event uuid (required)
     * @return ApiResponse&lt;WebhookEventDetailsResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get webhook event by uuid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookEventDetailsResponse> detailsWebhookEventWithHttpInfo(UUID id) throws ApiException {
        okhttp3.Call localVarCall = detailsWebhookEventValidateBeforeCall(id, null);
        Type localVarReturnType = new TypeToken<WebhookEventDetailsResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webhook event by uuid (asynchronously)
     * 
     * @param id Webhook event uuid (required)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Get webhook event by uuid </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call detailsWebhookEventAsync(UUID id, final ApiCallback<WebhookEventDetailsResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = detailsWebhookEventValidateBeforeCall(id, _callback);
        Type localVarReturnType = new TypeToken<WebhookEventDetailsResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
    /**
     * Build call for listWebhookEvent
     * @param count Number of element in page (required)
     * @param page Page number (required)
     * @param since Filter option: all events from specified timestamp (optional)
     * @param to Filter option: all events up to specified timestamp (optional)
     * @param type Filter option: all events of type (optional)
     * @param httpStatusCode Filter option: all events of http status code (optional)
     * @param error Filter option: all events with following error (optional)
     * @param _callback Callback for upload/download progress
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of webhook events </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebhookEventCall(Integer count, Integer page, OffsetDateTime since, OffsetDateTime to, List<WebhookEventTriggerEnum> type, List<WebhookEventHttpStatusCodeGroupEnum> httpStatusCode, List<WebhookEventErrorEnum> error, final ApiCallback _callback) throws ApiException {
        String basePath = null;

        // Operation Servers
        String[] localBasePaths = new String[] {  };

        // Determine Base Path to Use
        if (localCustomBaseUrl != null){
            basePath = localCustomBaseUrl;
        } else if ( localBasePaths.length > 0 ) {
            basePath = localBasePaths[localHostIndex];
        } else {
            basePath = null;
        }

        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/public/v1/webhook-events";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        Map<String, String> localVarCookieParams = new HashMap<String, String>();
        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        if (count != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("count", count));
        }

        if (page != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("page", page));
        }

        if (since != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("since", since));
        }

        if (to != null) {
            localVarQueryParams.addAll(localVarApiClient.parameterToPair("to", to));
        }

        if (type != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "type", type));
        }

        if (httpStatusCode != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "http_status_code", httpStatusCode));
        }

        if (error != null) {
            localVarCollectionQueryParams.addAll(localVarApiClient.parameterToPairs("multi", "error", error));
        }

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = localVarApiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) {
            localVarHeaderParams.put("Accept", localVarAccept);
        }

        final String[] localVarContentTypes = {
            
        };
        final String localVarContentType = localVarApiClient.selectHeaderContentType(localVarContentTypes);
        if (localVarContentType != null) {
            localVarHeaderParams.put("Content-Type", localVarContentType);
        }

        String[] localVarAuthNames = new String[] { "apiKey", "oauth2" };
        return localVarApiClient.buildCall(basePath, localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarCookieParams, localVarFormParams, localVarAuthNames, _callback);
    }

    @SuppressWarnings("rawtypes")
    private okhttp3.Call listWebhookEventValidateBeforeCall(Integer count, Integer page, OffsetDateTime since, OffsetDateTime to, List<WebhookEventTriggerEnum> type, List<WebhookEventHttpStatusCodeGroupEnum> httpStatusCode, List<WebhookEventErrorEnum> error, final ApiCallback _callback) throws ApiException {
        
        // verify the required parameter 'count' is set
        if (count == null) {
            throw new ApiException("Missing the required parameter 'count' when calling listWebhookEvent(Async)");
        }
        
        // verify the required parameter 'page' is set
        if (page == null) {
            throw new ApiException("Missing the required parameter 'page' when calling listWebhookEvent(Async)");
        }
        

        okhttp3.Call localVarCall = listWebhookEventCall(count, page, since, to, type, httpStatusCode, error, _callback);
        return localVarCall;

    }

    /**
     * Get webhook event page
     * 
     * @param count Number of element in page (required)
     * @param page Page number (required)
     * @param since Filter option: all events from specified timestamp (optional)
     * @param to Filter option: all events up to specified timestamp (optional)
     * @param type Filter option: all events of type (optional)
     * @param httpStatusCode Filter option: all events of http status code (optional)
     * @param error Filter option: all events with following error (optional)
     * @return WebhookEventPageResponse
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of webhook events </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public WebhookEventPageResponse listWebhookEvent(Integer count, Integer page, OffsetDateTime since, OffsetDateTime to, List<WebhookEventTriggerEnum> type, List<WebhookEventHttpStatusCodeGroupEnum> httpStatusCode, List<WebhookEventErrorEnum> error) throws ApiException {
        ApiResponse<WebhookEventPageResponse> localVarResp = listWebhookEventWithHttpInfo(count, page, since, to, type, httpStatusCode, error);
        return localVarResp.getData();
    }

    /**
     * Get webhook event page
     * 
     * @param count Number of element in page (required)
     * @param page Page number (required)
     * @param since Filter option: all events from specified timestamp (optional)
     * @param to Filter option: all events up to specified timestamp (optional)
     * @param type Filter option: all events of type (optional)
     * @param httpStatusCode Filter option: all events of http status code (optional)
     * @param error Filter option: all events with following error (optional)
     * @return ApiResponse&lt;WebhookEventPageResponse&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of webhook events </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public ApiResponse<WebhookEventPageResponse> listWebhookEventWithHttpInfo(Integer count, Integer page, OffsetDateTime since, OffsetDateTime to, List<WebhookEventTriggerEnum> type, List<WebhookEventHttpStatusCodeGroupEnum> httpStatusCode, List<WebhookEventErrorEnum> error) throws ApiException {
        okhttp3.Call localVarCall = listWebhookEventValidateBeforeCall(count, page, since, to, type, httpStatusCode, error, null);
        Type localVarReturnType = new TypeToken<WebhookEventPageResponse>(){}.getType();
        return localVarApiClient.execute(localVarCall, localVarReturnType);
    }

    /**
     * Get webhook event page (asynchronously)
     * 
     * @param count Number of element in page (required)
     * @param page Page number (required)
     * @param since Filter option: all events from specified timestamp (optional)
     * @param to Filter option: all events up to specified timestamp (optional)
     * @param type Filter option: all events of type (optional)
     * @param httpStatusCode Filter option: all events of http status code (optional)
     * @param error Filter option: all events with following error (optional)
     * @param _callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     * @http.response.details
     <table summary="Response Details" border="1">
        <tr><td> Status Code </td><td> Description </td><td> Response Headers </td></tr>
        <tr><td> 200 </td><td> Page of webhook events </td><td>  -  </td></tr>
        <tr><td> 401 </td><td> Authentication error </td><td>  -  </td></tr>
        <tr><td> 429 </td><td> Too Many Requests </td><td>  -  </td></tr>
     </table>
     */
    public okhttp3.Call listWebhookEventAsync(Integer count, Integer page, OffsetDateTime since, OffsetDateTime to, List<WebhookEventTriggerEnum> type, List<WebhookEventHttpStatusCodeGroupEnum> httpStatusCode, List<WebhookEventErrorEnum> error, final ApiCallback<WebhookEventPageResponse> _callback) throws ApiException {

        okhttp3.Call localVarCall = listWebhookEventValidateBeforeCall(count, page, since, to, type, httpStatusCode, error, _callback);
        Type localVarReturnType = new TypeToken<WebhookEventPageResponse>(){}.getType();
        localVarApiClient.executeAsync(localVarCall, localVarReturnType, _callback);
        return localVarCall;
    }
}
