/*
 * PandaDoc Public API
 * PandaDoc Public API documentation
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pandadoc.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pandadoc.client.models.RecipientVerificationSettingsPasscodeVerification;
import com.pandadoc.client.models.RecipientVerificationSettingsPhoneVerification;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;

/**
 * RecipientVerificationSettings
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class RecipientVerificationSettings {
  /**
   * Verification place
   */
  @JsonAdapter(VerificationPlaceEnum.Adapter.class)
  public enum VerificationPlaceEnum {
    OPEN("before_open"),
    
    SIGN("before_sign");

    private String value;

    VerificationPlaceEnum(String value) {
      this.value = value;
    }

    public String getValue() {
      return value;
    }

    @Override
    public String toString() {
      return String.valueOf(value);
    }

    public static VerificationPlaceEnum fromValue(String value) {
      for (VerificationPlaceEnum b : VerificationPlaceEnum.values()) {
        if (b.value.equals(value)) {
          return b;
        }
      }
      throw new IllegalArgumentException("Unexpected value '" + value + "'");
    }

    public static class Adapter extends TypeAdapter<VerificationPlaceEnum> {
      @Override
      public void write(final JsonWriter jsonWriter, final VerificationPlaceEnum enumeration) throws IOException {
        jsonWriter.value(enumeration.getValue());
      }

      @Override
      public VerificationPlaceEnum read(final JsonReader jsonReader) throws IOException {
        String value =  jsonReader.nextString();
        return VerificationPlaceEnum.fromValue(value);
      }
    }
  }

  public static final String SERIALIZED_NAME_VERIFICATION_PLACE = "verification_place";
  @SerializedName(SERIALIZED_NAME_VERIFICATION_PLACE)
  private VerificationPlaceEnum verificationPlace;

  public static final String SERIALIZED_NAME_PASSCODE_VERIFICATION = "passcode_verification";
  @SerializedName(SERIALIZED_NAME_PASSCODE_VERIFICATION)
  private RecipientVerificationSettingsPasscodeVerification passcodeVerification;

  public static final String SERIALIZED_NAME_PHONE_VERIFICATION = "phone_verification";
  @SerializedName(SERIALIZED_NAME_PHONE_VERIFICATION)
  private RecipientVerificationSettingsPhoneVerification phoneVerification;

  public RecipientVerificationSettings() { 
  }

  public RecipientVerificationSettings verificationPlace(VerificationPlaceEnum verificationPlace) {
    
    this.verificationPlace = verificationPlace;
    return this;
  }

   /**
   * Verification place
   * @return verificationPlace
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Verification place")

  public VerificationPlaceEnum getVerificationPlace() {
    return verificationPlace;
  }


  public void setVerificationPlace(VerificationPlaceEnum verificationPlace) {
    this.verificationPlace = verificationPlace;
  }


  public RecipientVerificationSettings passcodeVerification(RecipientVerificationSettingsPasscodeVerification passcodeVerification) {
    
    this.passcodeVerification = passcodeVerification;
    return this;
  }

   /**
   * Get passcodeVerification
   * @return passcodeVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RecipientVerificationSettingsPasscodeVerification getPasscodeVerification() {
    return passcodeVerification;
  }


  public void setPasscodeVerification(RecipientVerificationSettingsPasscodeVerification passcodeVerification) {
    this.passcodeVerification = passcodeVerification;
  }


  public RecipientVerificationSettings phoneVerification(RecipientVerificationSettingsPhoneVerification phoneVerification) {
    
    this.phoneVerification = phoneVerification;
    return this;
  }

   /**
   * Get phoneVerification
   * @return phoneVerification
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public RecipientVerificationSettingsPhoneVerification getPhoneVerification() {
    return phoneVerification;
  }


  public void setPhoneVerification(RecipientVerificationSettingsPhoneVerification phoneVerification) {
    this.phoneVerification = phoneVerification;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    RecipientVerificationSettings recipientVerificationSettings = (RecipientVerificationSettings) o;
    return Objects.equals(this.verificationPlace, recipientVerificationSettings.verificationPlace) &&
        Objects.equals(this.passcodeVerification, recipientVerificationSettings.passcodeVerification) &&
        Objects.equals(this.phoneVerification, recipientVerificationSettings.phoneVerification);
  }

  @Override
  public int hashCode() {
    return Objects.hash(verificationPlace, passcodeVerification, phoneVerification);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class RecipientVerificationSettings {\n");
    sb.append("    verificationPlace: ").append(toIndentedString(verificationPlace)).append("\n");
    sb.append("    passcodeVerification: ").append(toIndentedString(passcodeVerification)).append("\n");
    sb.append("    phoneVerification: ").append(toIndentedString(phoneVerification)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

