/*
 * PandaDoc Public API
 * PandaDoc Public API documentation
 *
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


package com.pandadoc.client.models;

import java.util.Objects;
import java.util.Arrays;
import com.google.gson.TypeAdapter;
import com.google.gson.annotations.JsonAdapter;
import com.google.gson.annotations.SerializedName;
import com.google.gson.stream.JsonReader;
import com.google.gson.stream.JsonWriter;
import com.pandadoc.client.models.DocumentCreateByTemplateRequestRecipients;
import io.swagger.annotations.ApiModel;
import io.swagger.annotations.ApiModelProperty;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;

/**
 * UploadSectionByPdfRequest
 */
@javax.annotation.Generated(value = "org.openapitools.codegen.languages.JavaClientCodegen")
public class UploadSectionByPdfRequest {
  public static final String SERIALIZED_NAME_URL = "url";
  @SerializedName(SERIALIZED_NAME_URL)
  private String url;

  public static final String SERIALIZED_NAME_RECIPIENTS = "recipients";
  @SerializedName(SERIALIZED_NAME_RECIPIENTS)
  private List<DocumentCreateByTemplateRequestRecipients> recipients = new ArrayList<>();

  public static final String SERIALIZED_NAME_PARSE_FORM_FIELDS = "parse_form_fields";
  @SerializedName(SERIALIZED_NAME_PARSE_FORM_FIELDS)
  private Boolean parseFormFields;

  public static final String SERIALIZED_NAME_NAME = "name";
  @SerializedName(SERIALIZED_NAME_NAME)
  private String name;

  public static final String SERIALIZED_NAME_TAGS = "tags";
  @SerializedName(SERIALIZED_NAME_TAGS)
  private List<String> tags = null;

  public static final String SERIALIZED_NAME_FIELDS = "fields";
  @SerializedName(SERIALIZED_NAME_FIELDS)
  private Object fields;

  public UploadSectionByPdfRequest() { 
  }

  public UploadSectionByPdfRequest url(String url) {
    
    this.url = url;
    return this;
  }

   /**
   * Use a URL to specify the PDF. We support only URLs starting with https.
   * @return url
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(example = "https://s3.amazonaws.com/pd-static-content/public-docs/pandadoc-panda-bear.png", required = true, value = "Use a URL to specify the PDF. We support only URLs starting with https.")

  public String getUrl() {
    return url;
  }


  public void setUrl(String url) {
    this.url = url;
  }


  public UploadSectionByPdfRequest recipients(List<DocumentCreateByTemplateRequestRecipients> recipients) {
    
    this.recipients = recipients;
    return this;
  }

  public UploadSectionByPdfRequest addRecipientsItem(DocumentCreateByTemplateRequestRecipients recipientsItem) {
    this.recipients.add(recipientsItem);
    return this;
  }

   /**
   * The list of recipients you&#39;re sending the document to. Every object must contain the email parameter. The &#x60;role&#x60;, &#x60;first_name&#x60; and &#x60;last_name&#x60; parameters are optional. If the &#x60;role&#x60; parameter passed, a person is assigned all fields matching their corresponding role. If not passed, a person will receive a read-only link to view the document. If the &#x60;first_name&#x60; and &#x60;last_name&#x60; not passed the system 1. creates a new contact, if none exists with the given &#x60;email&#x60;; or 2. gets the existing contact with the given &#x60;email&#x60; that already exists.
   * @return recipients
  **/
  @javax.annotation.Nonnull
  @ApiModelProperty(required = true, value = "The list of recipients you're sending the document to. Every object must contain the email parameter. The `role`, `first_name` and `last_name` parameters are optional. If the `role` parameter passed, a person is assigned all fields matching their corresponding role. If not passed, a person will receive a read-only link to view the document. If the `first_name` and `last_name` not passed the system 1. creates a new contact, if none exists with the given `email`; or 2. gets the existing contact with the given `email` that already exists.")

  public List<DocumentCreateByTemplateRequestRecipients> getRecipients() {
    return recipients;
  }


  public void setRecipients(List<DocumentCreateByTemplateRequestRecipients> recipients) {
    this.recipients = recipients;
  }


  public UploadSectionByPdfRequest parseFormFields(Boolean parseFormFields) {
    
    this.parseFormFields = parseFormFields;
    return this;
  }

   /**
   * Set this parameter as &#x60;true&#x60; if you create a document from a PDF with form fields and as &#x60;false&#x60; if you upload a PDF with field tags.
   * @return parseFormFields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "Set this parameter as `true` if you create a document from a PDF with form fields and as `false` if you upload a PDF with field tags.")

  public Boolean getParseFormFields() {
    return parseFormFields;
  }


  public void setParseFormFields(Boolean parseFormFields) {
    this.parseFormFields = parseFormFields;
  }


  public UploadSectionByPdfRequest name(String name) {
    
    this.name = name;
    return this;
  }

   /**
   * Get name
   * @return name
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(value = "")

  public String getName() {
    return name;
  }


  public void setName(String name) {
    this.name = name;
  }


  public UploadSectionByPdfRequest tags(List<String> tags) {
    
    this.tags = tags;
    return this;
  }

  public UploadSectionByPdfRequest addTagsItem(String tagsItem) {
    if (this.tags == null) {
      this.tags = new ArrayList<>();
    }
    this.tags.add(tagsItem);
    return this;
  }

   /**
   * Mark your document with one or several tags.
   * @return tags
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "[\"pdf_document\",\"test_document\"]", value = "Mark your document with one or several tags.")

  public List<String> getTags() {
    return tags;
  }


  public void setTags(List<String> tags) {
    this.tags = tags;
  }


  public UploadSectionByPdfRequest fields(Object fields) {
    
    this.fields = fields;
    return this;
  }

   /**
   * If you are upload a section from a PDF with field tags, you can pass a list of the fields you&#39;d like to pre-fill in the document. If you are upload a section from a PDF with form fields, list all the fields and provide the &#x60;role&#x60; parameter so that the fields are assigned to document recipients. You can provide empty value for the field so that it&#39;s not pre-filled: \&quot;value\&quot;: \&quot;\&quot;. 
   * @return fields
  **/
  @javax.annotation.Nullable
  @ApiModelProperty(example = "{\"Like\":{\"value\":true},\"Delivery\":{\"value\":\"Same Day Delivery\"},\"Date\":{\"value\":\"2019-12-31T00:00:00.000Z\"}}", value = "If you are upload a section from a PDF with field tags, you can pass a list of the fields you'd like to pre-fill in the document. If you are upload a section from a PDF with form fields, list all the fields and provide the `role` parameter so that the fields are assigned to document recipients. You can provide empty value for the field so that it's not pre-filled: \"value\": \"\". ")

  public Object getFields() {
    return fields;
  }


  public void setFields(Object fields) {
    this.fields = fields;
  }


  @Override
  public boolean equals(Object o) {
    if (this == o) {
      return true;
    }
    if (o == null || getClass() != o.getClass()) {
      return false;
    }
    UploadSectionByPdfRequest uploadSectionByPdfRequest = (UploadSectionByPdfRequest) o;
    return Objects.equals(this.url, uploadSectionByPdfRequest.url) &&
        Objects.equals(this.recipients, uploadSectionByPdfRequest.recipients) &&
        Objects.equals(this.parseFormFields, uploadSectionByPdfRequest.parseFormFields) &&
        Objects.equals(this.name, uploadSectionByPdfRequest.name) &&
        Objects.equals(this.tags, uploadSectionByPdfRequest.tags) &&
        Objects.equals(this.fields, uploadSectionByPdfRequest.fields);
  }

  @Override
  public int hashCode() {
    return Objects.hash(url, recipients, parseFormFields, name, tags, fields);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder();
    sb.append("class UploadSectionByPdfRequest {\n");
    sb.append("    url: ").append(toIndentedString(url)).append("\n");
    sb.append("    recipients: ").append(toIndentedString(recipients)).append("\n");
    sb.append("    parseFormFields: ").append(toIndentedString(parseFormFields)).append("\n");
    sb.append("    name: ").append(toIndentedString(name)).append("\n");
    sb.append("    tags: ").append(toIndentedString(tags)).append("\n");
    sb.append("    fields: ").append(toIndentedString(fields)).append("\n");
    sb.append("}");
    return sb.toString();
  }

  /**
   * Convert the given object to string with each line indented by 4 spaces
   * (except the first line).
   */
  private String toIndentedString(Object o) {
    if (o == null) {
      return "null";
    }
    return o.toString().replace("\n", "\n    ");
  }

}

